AWSTemplateFormatVersion: "2010-09-09"

Description: Lambda function for checking costs and stopping EC2 instances, with SNS email subscription


Parameters:
  SubscribingEmail:
    Type: String
    Description: Email address to receive notifications

  EC2Regions:
    Type: String
    Description: AWS regions to check for running EC2 instances to stop
    Default: "us-east-1,ap-southeast-1"

  CostThreshold:
    Type: Number
    Description: Cost threshold beyond which EC2 instances will be stopped
    Default: 5000.0

  CronExpression:
    Type: String
    Description: Cron expression for running the lambda function
    Default: "cron(0 9,10,11,12,13,14,15,16,17,18,19,20,21,22,23 * * ? *)"


Resources:

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sns-topic.html
  SNSTopicReportCosts:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: "ReportCosts"
      DisplayName: "ReportCosts"
      FifoTopic: false
      Subscription:
        - Endpoint:
            Ref: SubscribingEmail
          Protocol: "email"

  CostCheckerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: lambda-cost-checker-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource:
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*'
              - Effect: Allow
                Action:
                  - sns:Publish
                  - ce:GetCostAndUsage
                Resource:
                  - '*'

  CostCheckerLambda:
    Type: AWS::Lambda::Function
    Description: This is a lambda function that checks the monthly cost of an AWS account
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt CostCheckerLambdaRole.Arn
      Runtime: python3.12
      Timeout: 60
      Environment:
        Variables:
          EMAIL_ADDRESS: !Ref SubscribingEmail
          EC2_REGIONS: !Ref EC2Regions
          COST_THRESHOLD: !Ref CostThreshold
          SNSTOPIC_ARN: !Sub "arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:ReportCosts"
      Code:
        ZipFile: |
          import boto3
          import datetime
          import json
          import os

          sts = boto3.client('sts')
          main_account_id = sts.get_caller_identity()['Account']

          # ----- STS -----
          def get_session(role_arn):
              resp = sts.assume_role(
                  RoleArn=role_arn,
                  RoleSessionName='session'
              )
              return boto3.Session(
                  aws_access_key_id=resp['Credentials']['AccessKeyId'],
                  aws_secret_access_key=resp['Credentials']['SecretAccessKey'],
                  aws_session_token=resp['Credentials']['SessionToken']
              )

          # ----- Cost Explorer -----
          def get_monthly_spend(ce, start_date=None, end_date=None):
              now = datetime.datetime.now()
              if start_date is None:
                  start_date = now.strftime('%Y-%m-01')
              if end_date is None:
                  if now.day == 1:
                      end_date = now.strftime('%Y-%m-02')
                  else:
                      end_date = now.strftime('%Y-%m-%d')

              r = ce.get_cost_and_usage(
                  TimePeriod={'Start': start_date, 'End': end_date},
                  Granularity='MONTHLY',
                  Metrics=['BlendedCost'])
              cost = r['ResultsByTime'][0]['Total']['BlendedCost']
              spend, unit = float(cost['Amount']), cost['Unit']
              return spend, unit

          def get_yesterdays_spend(ce, max_items=10, threshold=0.01):
              now = datetime.datetime.now()
              yesterday = now - datetime.timedelta(days=1)
              start_date = yesterday.strftime('%Y-%m-%d')
              end_date = now.strftime('%Y-%m-%d')

              r = ce.get_cost_and_usage(
                  TimePeriod={'Start': start_date, 'End': end_date},
                  Granularity='DAILY',
                  Metrics=['BlendedCost'],
                  GroupBy=[{
                      'Type': 'DIMENSION',
                      'Key': 'USAGE_TYPE'
                  }])
              results = r['ResultsByTime'][0]['Groups']

              spend = []
              for x in results:
                  cost = x['Keys'][0]
                  amount = float(x['Metrics']['BlendedCost']['Amount'])
                  if amount >= threshold:
                      spend.append(
                          (cost, amount)
                      )
              top_spend = sorted(spend, key=lambda x: x[1], reverse=True)
              return top_spend

          # ----- EC2 -----
          def stop_instances(ec2):
              r = ec2.describe_instances()
              instance_ids_stopped = []
              for reservation in r['Reservations']:
                  for instance in reservation['Instances']:
                      instance_id = instance['InstanceId']
                      ec2.stop_instances(
                          InstanceIds=[ instance_id ]
                      )
                      instance_ids_stopped.append(instance_id)
              return instance_ids_stopped

          # ----- Lambda -----
          def lambda_handler(event, context):
              account_ids = ['root']
              actions = ['report_spend', 'stop_ec2']
              regions = os.getenv('EC2REGIONS', 'us-east-1').split(',')
              topic_arn = os.getenv('SNSTOPIC_ARN', None)
              stop_ec2_threshold = float(os.getenv('COST_THRESHOLD', '1000.0'))

              results = {}
              if 'report_spend' in actions:
                  spend = {}
                  for account_id in account_ids:
                      if account_id == "root" or account_id == main_account_id:
                          ce = boto3.client('ce')
                      else:
                          session = get_session(f"arn:aws:iam::{account_id}:role/OrganizationAccountAccessRole")
                          ce = session.client('ce')
                      account_spend, unit = get_monthly_spend(ce)
                      account_top_spend = get_yesterdays_spend(ce)
                      spend[account_id] = {
                          "Monthly spend": account_spend,
                          "Yesterday's spend": account_top_spend
                      }
                  results['Spend'] = spend
                  
                  # Create and send message
                  message = 'AWS Accounts - Monthly Spend'
                  for account_id in account_ids:
                      message += f'\n\n ----- Account ID {account_id}: USD {spend[account_id]["Monthly spend"]:.2f} (Month total) -----\nYesterday\'s spend:'
                      account_top_spend = spend[account_id]["Yesterday's spend"]
                      for i, (item, amount) in enumerate(account_top_spend):
                          message += f'\n{i+1:02d}. {item}: {amount:.2f}'
                          if i == 9:
                              break
                  print(message)

                  if topic_arn is not None:
                      sns = boto3.client('sns')
                      response = sns.publish(
                          TopicArn=topic_arn,
                          Message=message,
                          Subject='AWS Current Usage'
                      )

              if 'stop_ec2' in actions:
                  ec2_actions = {}
                  for account_id in account_ids:
                      if account_id == "root" or account_id == main_account_id:
                          ce = boto3.client('ce')
                      else:
                          session = get_session(f"arn:aws:iam::{account_id}:role/OrganizationAccountAccessRole")
                          ce = session.client('ce')

                      account_spend, _ = get_monthly_spend(ce)
                      if account_spend > stop_ec2_threshold:
                          ec2_actions[account_id] = {}
                          ec2_messages = []
                          for region in regions:
                              if account_id == main_account_id:
                                  ec2 = boto3.client('ec2', region_name = region)
                              else:
                                  ec2 = session.client('ec2', region_name = region)
                              instance_ids_stopped = stop_instances(ec2)
                              ec2_actions[account_id][region] = {
                                  'Stopped EC2s': instance_ids_stopped
                              }
                              ec2_messages.append(f'Region {region}: EC2s stopped: ' + ','.join(instance_ids_stopped))

                          ec2_messages = '\n'.join(ec2_messages)
                          results['ec2'] = ec2_actions
                          message += f'\n\n----- EC2 Instances Stopped -----\n\n{ec2_messages}'

                          if topic_arn is not None:
                              sns = boto3.client('sns')
                              response = sns.publish(
                                  TopicArn=topic_arn,
                                  Message=ec2_messages,
                                  Subject='EC2 Instances Stopped'
                              )
              return message
              # return {
              #     'statusCode': 200,
              #     'body': results  # json.dumps(results)
              # }

  # InvokeConfig:
  #   Type: AWS::Lambda::EventInvokeConfig
  #   Properties:
  #     FunctionName: !Ref CostCheckerLambda
  #     Qualifier: $LATEST
  #     MaximumEventAgeInSeconds: 60
  #     MaximumRetryAttempts: 0
  #     DestinationConfig:
  #       OnSuccess:
  #         Destination: !Sub "arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:ReportCosts"
  #       OnFailure:
  #         Destination: !Sub "arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:ReportCosts"

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-events-rule.html
  EventsRuleDailyCostChecks:
    Type: "AWS::Events::Rule"
    Properties:
      Id: "DailyCostChecks"
      Name: "DailyCostChecks"
      Description: "Daily checks on the costs incurred"
      ScheduleExpression: !Ref CronExpression
      State: "ENABLED"
      Targets:
      - Arn:
          Fn::GetAtt:
          - "CostCheckerLambda"
          - "Arn"
        Id: "CostCheckerLambda"

  EBRulePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      FunctionName: !Ref CostCheckerLambda
      SourceArn: !GetAtt EventsRuleDailyCostChecks.Arn
